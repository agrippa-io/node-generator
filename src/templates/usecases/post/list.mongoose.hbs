import { Logger } from '@agrippa-io/node-utils/src/Logger'
import { UseCase } from '@agrippa-io/node-usecase/src'
import MongooseCodes from '@agrippa-io/node-errors/src/constants/MongooseCodes'
import ErrorAPI from '@agrippa-io/node-errors/src/ErrorAPI'
import {{ pascalCase model }} from '../../models/{{ pascalCase model }}'
import InterfaceMongooseModel{{ pascalCase model }} from '../../models/{{ pascalCase model }}/interface'


export interface InterfaceMongoose{{ pascalCase model }}CreateMany {
  data: InterfaceMongooseModel{{ pascalCase model }}[]
  options: any
}

export default class Mongoose{{ pascalCase model }}CreateMany extends UseCase {
  // Class Properties
  data: InterfaceMongooseModel{{ pascalCase model }}[]
  options: any

  constructor(mongooseConfig: InterfaceMongoose{{ pascalCase model }}CreateMany) {
    super()
    const { data, options } = mongooseConfig
    this.options = options
    this.data = data
  }

  async perform() : Promise<void> {
    Logger.debug('Triggered -> Mongoose{{ pascalCase model }}CreateMany')
    try {
      const results = []
      for (const {{ camelCase model }}Data of this.data) {
        const {{ camelCase model }}Instance = new {{ pascalCase model }}({{ camelCase model }}Data)
        const {{ camelCase model }} = await {{ camelCase model }}Instance.save()
        // TODO - Handle {{ pascalCase model }} creation errors
        results.push({{ camelCase model }})
      }
        this.setSuccess(results)
    } catch (err) {
        this.setFailure(err, [])
    }
  }
}
