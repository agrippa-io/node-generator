import { mongoose } from '@agrippa-io/node-mongoose'
import { Logger } from '@agrippa-io/node-utils'
import { UseCase } from '@agrippa-io/node-usecase'
import { ErrorAPI, ErrorIncompleteDataModification } from '@agrippa-io/node-errors'
import {{ pascalCase model }} from '../../models/{{ pascalCase model }}'
import InterfaceMongooseModel{{ pascalCase model }} from '../../models/{{ pascalCase model }}/interfaces/document'


export interface InterfaceMongoose{{ pascalCase model }}DeleteOne {
  options: any
  filterQuery: mongoose.FilterQuery<InterfaceMongooseModel{{ pascalCase model }}>
}

export default class Mongoose{{ pascalCase model }}DeleteOne extends UseCase {
  // Class Properties
  options: any
  filterQuery: mongoose.FilterQuery<InterfaceMongooseModel{{ pascalCase model }}>

  constructor(mongooseConfig: InterfaceMongoose{{ pascalCase model }}DeleteOne) {
    super()
    const { options, filterQuery } = mongooseConfig
    this.options = options
    this.filterQuery = filterQuery
  }

  async perform() : Promise<void> {
    Logger.debug('Triggered -> Mongoose{{ pascalCase model }}DeleteOne')
    try {
      const result = await {{ pascalCase model }}.findOne(this.filterQuery)
      const deleteResult = await {{ pascalCase model }}.deleteOne(this.filterQuery)

      // @ts-ignore
      if (deleteResult.ok !== 1) {
        throw new ErrorIncompleteDataModification('Failed to delete document matching filter query')
      }

      this.setSuccess(result)
    } catch (err) {
      this.setFailure(new ErrorAPI(err), [])
    }
  }
}
