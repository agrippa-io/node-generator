import { mongoose } from '@agrippa-io/node-mongoose'
import { Logger } from '@agrippa-io/node-utils'
import { UseCase } from '@agrippa-io/node-usecase'
import { ErrorIncompleteDataModification } from '@agrippa-io/node-errors'
import {{ pascalCase model }} from '../../models/{{ pascalCase model }}'
import InterfaceMongooseModel{{ pascalCase model }} from '../../models/{{ pascalCase model }}/interfaces/document'

export interface InterfaceMongoose{{ pascalCase model }}UpdateOne {
  options : mongoose.SaveOptions
  filterQuery: mongoose.FilterQuery<InterfaceMongooseModel{{ pascalCase model }}>
  updateQuery: mongoose.UpdateQuery<InterfaceMongooseModel{{ pascalCase model }}>
}

export default class Mongoose{{ pascalCase model }}UpdateOne extends UseCase {
  // Class Properties
  options : mongoose.SaveOptions
  filterQuery: mongoose.FilterQuery<InterfaceMongooseModel{{ pascalCase model }}>
  updateQuery: mongoose.UpdateQuery<InterfaceMongooseModel{{ pascalCase model }}>

  constructor(props: InterfaceMongoose{{ pascalCase model }}UpdateOne) {
    super()
    this.options = props.options
    this.filterQuery = props.filterQuery
    this.updateQuery = props.updateQuery
  }

  async perform() : Promise<void> {
    Logger.debug('Triggered -> Mongoose{{ pascalCase model }}UpdateOne')
    try {
      const updateResult = await {{ pascalCase model }}.updateOne(this.filterQuery, this.updateQuery)

      // @ts-ignore
      if (updateResult.ok !== 1) {
        throw new ErrorIncompleteDataModification('Failed to update document matching filter query')
      }

      const result = await {{ pascalCase model }}.findOne(this.filterQuery)
      this.setSuccess(result)
    } catch (err) {
      this.setFailure(err, [])
    }
  }
}
